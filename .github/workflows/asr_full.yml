name: Full ASR (words.json)

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  run-asr:
    runs-on: ubuntu-latest

    env:
      PYTHONUNBUFFERED: "1"
      PYTHONPATH: .
      # 模型缓存目录（与脚本保持一致，必要时可通过环境变量覆盖）
      ASRPROGRAM_MODELS_DIR: ~/.cache/asrprogram/models
      ASRPROGRAM_CACHE_DIR: ~/.cache/asrprogram

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install ffmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install Python dependencies
        run: |
          set -e
          python -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          # 若项目是包结构，便于 src/* 可被 import
          if [ -f setup.py ] || [ -f pyproject.toml ]; then pip install -e .; fi

      - name: Cache ASR models
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/asrprogram/models
          key: asr-fw-models-${{ runner.os }}-tiny-${{ hashFiles('scripts/download_model.py') }}
          restore-keys: |
            asr-fw-models-${{ runner.os }}-tiny-

      - name: Download tiny model (faster-whisper)
        run: |
          set -e
          # 若脚本存在，走统一下载器；否则直接用 pip/requests 的备选下载（由你的脚本负责）
          if [ -f scripts/download_model.py ]; then
            python scripts/download_model.py \
              --backend faster-whisper \
              --model tiny \
              --models-dir "${ASRPROGRAM_MODELS_DIR}"
          else
            echo "scripts/download_model.py 不存在，请确保前几轮已生成。"
            exit 1
          fi

      - name: Verify environment
        run: |
          if [ -f scripts/verify_env.py ]; then
            python scripts/verify_env.py || true
          else
            echo "verify_env.py 不存在，跳过体检。"
          fi

      - name: Generate a tiny WAV (no asset committed)
        run: |
          python .github/scripts/gen_sine_wav.py tmp_audio/beep.wav

      - name: Run ASR pipeline (words + segments)
        run: |
          # 你的 CLI：请保持这些参数被支持；如有差异，按你的 CLI 调整
          python -m src.cli.main \
            --input tmp_audio \
            --out-dir out \
            --backend faster-whisper \
            --language auto \
            --segments-json true \
            --overwrite true \
            --num-workers 1 \
            --verbose

      - name: Validate outputs (structure only)
        run: |
          python .github/scripts/validate_outputs.py out

      - name: Upload artifacts (outputs)
        uses: actions/upload-artifact@v4
        with:
          name: asr-outputs
          path: out
